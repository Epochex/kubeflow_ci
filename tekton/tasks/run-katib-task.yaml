# kubeflow_ci/tekton/tasks/run-katib-task.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-katib-task
spec:
  workspaces:
    - name: source
      description: "Workspace containing the Katib experiment file"

  params:
    - name: KATIB_EXPERIMENT_FILE
      type: string
      default: "katib/katib-experiment.yaml"

  results:
    - name: best-learning-rate
    - name: best-batch-size

  steps:
    - name: debug-check-files
      image: busybox
      workingDir: /workspace/source
      script: |
        #!/bin/sh
        echo "=== Debugging /workspace/source ==="
        ls -al
        echo "=== Checking katib dir ==="
        ls -al katib || true
        echo "===================================="

    - name: apply-katib
      image: bitnami/kubectl:latest
      workingDir: /workspace/source
      script: |
        #!/usr/bin/env sh
        echo "Checking for existing Experiment..."

        EXP_NAME=$(yq e '.metadata.name' $(params.KATIB_EXPERIMENT_FILE))
        EXISTING_EXP=$(kubectl get experiment $EXP_NAME -n default --ignore-not-found)

        if [ -n "$EXISTING_EXP" ]; then
          echo "Experiment $EXP_NAME already exists. Deleting..."
          kubectl delete experiment $EXP_NAME -n default
        fi

        echo "Applying new Experiment..."
        kubectl apply -f $(params.KATIB_EXPERIMENT_FILE)

    - name: check-dataset
      image: busybox
      script: |
        #!/bin/sh
        if [ ! -f /workspace/source/data/load_stimulus_global.csv ]; then
          echo "Dataset file is missing: /workspace/source/data/load_stimulus_global.csv"
          exit 1
        fi

    - name: wait-katib
      image: bitnami/kubectl:latest
      workingDir: /workspace/source
      script: |
        #!/usr/bin/env sh
        set -e

        EXP_NAME=$(yq e '.metadata.name' $(params.KATIB_EXPERIMENT_FILE))
        echo "Waiting for Katib Experiment: $EXP_NAME..."

        TIMEOUT=1800  # 增加最大等待时间（秒）
        INTERVAL=10   # 检查间隔（秒）
        ELAPSED=0     # 已等待时间

        while true
        do
          RAW_JSON=$(kubectl get experiment $EXP_NAME -n default -o json 2>/dev/null || true)
          if [ -z "$RAW_JSON" ]; then
            echo "No Experiment JSON found. Retrying..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Error: Timeout waiting for Experiment to appear."
              exit 1
            fi
            continue
          fi

          CLEAN_JSON=$(echo "$RAW_JSON" | tr -d '\000-\031' | sed $'s/[\x00-\x1F]//g')

          if [ -z "$CLEAN_JSON" ] || ! echo "$CLEAN_JSON" | jq empty; then
            echo "Invalid or empty JSON data received. Retrying..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Error: Timeout waiting for valid Experiment data."
              exit 1
            fi
            continue
          fi

          PHASE=$(echo "$CLEAN_JSON" | jq -r '.status.conditions[] | select(.type=="Succeeded").status // empty')

          if [ "$PHASE" = "True" ]; then
            echo "Katib Experiment Succeeded!"
            break
          fi

          RUNNING=$(echo "$CLEAN_JSON" | jq -r '.status.conditions[] | select(.type=="Running").status // empty')
          if [ "$RUNNING" = "True" ]; then
            echo "Experiment is still running..."
            echo "Current running trials:"
            kubectl get trials -n default -o wide
          else
            echo "Experiment not yet succeeded or running."
            echo "Conditions: "
            echo "$CLEAN_JSON" | jq '.status.conditions'
          fi

          ELAPSED=$((ELAPSED + INTERVAL))
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Error: Timeout waiting for Katib Experiment to complete."
            exit 1
          fi

          sleep $INTERVAL
        done

        BEST_TRIAL=$(echo "$CLEAN_JSON" | jq -r '.status.currentOptimalTrial.parameterAssignments // empty')
        if [ -z "$BEST_TRIAL" ]; then
          echo "Error: No optimal trial found."
          exit 1
        fi

        echo "Best Trial param assignments: $BEST_TRIAL"

        BEST_LR=$(echo "$BEST_TRIAL" | jq -r '.[] | select(.name=="learning_rate") | .value // empty')
        BEST_BS=$(echo "$BEST_TRIAL" | jq -r '.[] | select(.name=="batch_size") | .value // empty')

        echo "best-learning-rate=$BEST_LR" >> /tekton/results/best-learning-rate
        echo "best-batch-size=$BEST_BS" >> /tekton/results/best-batch-size

